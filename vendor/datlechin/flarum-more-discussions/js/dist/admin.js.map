{"version":3,"file":"admin.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,+BCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,a,aCElDC,EAAS,6BACTC,EAAgBD,EAAS,IAyC/B,SAASE,EAAMnB,GACb,OAAOoB,IAAAA,WAAAA,MAzCYH,6CAyCwBjB,EAC7C,CAxCAoB,IAAAA,aAAAA,IAAqB,qCAAqC,WACxDA,IAAAA,cAAAA,IACOH,GACJI,gBAAgB,CACfC,QAASJ,EAAgB,aACzBK,MAAOJ,EAAM,oBACbK,KAAML,EAAM,mBACZM,KAAM,SAEPJ,gBAAgB,CACfC,QAASJ,EAAgB,mBACzBK,MAAOJ,EAAM,0BACbK,KAAML,EAAM,yBACZM,KAAM,WAEPJ,gBAAgB,CACfC,QAASJ,EAAgB,YACzBK,MAAOJ,EAAM,mBACbK,KAAML,EAAM,kBACZM,KAAM,SACNC,QAAS,CACP,GAAIP,EAAM,0BACV,gBAAiBA,EAAM,uBACvB,aAAcA,EAAM,0BACpBQ,UAAWR,EAAM,0BACjB,WAAYA,EAAM,uBAClB,SAAUA,EAAM,0BAElBS,QAAS,KAEVP,gBAAgB,CACfC,QAASJ,EAAgB,aACzBK,MAAOJ,EAAM,4BACbK,KAAML,EAAM,2BACZM,KAAM,WAEZ,G","sources":["webpack://@datlechin/flarum-more-discussions/webpack/bootstrap","webpack://@datlechin/flarum-more-discussions/webpack/runtime/compat get default export","webpack://@datlechin/flarum-more-discussions/webpack/runtime/define property getters","webpack://@datlechin/flarum-more-discussions/webpack/runtime/hasOwnProperty shorthand","webpack://@datlechin/flarum-more-discussions/webpack/runtime/make namespace object","webpack://@datlechin/flarum-more-discussions/external root \"flarum.core.compat['admin/app']\"","webpack://@datlechin/flarum-more-discussions/./src/admin/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/app'];","import app from 'flarum/admin/app';\n\nconst prefix = 'datlechin-more-discussions';\nconst settingPrefix = prefix + '.';\nconst localePrefix = prefix + '.admin.settings.';\n\napp.initializers.add('datlechin/flarum-more-discussions', () => {\n  app.extensionData\n    .for(prefix)\n    .registerSetting({\n      setting: settingPrefix + 'block_name',\n      label: trans('block_name_label'),\n      help: trans('block_name_help'),\n      type: 'text',\n    })\n    .registerSetting({\n      setting: settingPrefix + 'discussion_limit',\n      label: trans('discussion_limit_label'),\n      help: trans('discussion_limit_help'),\n      type: 'number',\n    })\n    .registerSetting({\n      setting: settingPrefix + 'filter_by',\n      label: trans('filter_by_label'),\n      help: trans('filter_by_help'),\n      type: 'select',\n      options: {\n        '': trans('filter_dropdown.latest'),\n        '-commentCount': trans('filter_dropdown.top'),\n        '-createdAt': trans('filter_dropdown.newest'),\n        createdAt: trans('filter_dropdown.oldest'),\n        '-hotness': trans('filter_dropdown.hot'),\n        '-votes': trans('filter_dropdown.votes'),\n      },\n      default: '',\n    })\n    .registerSetting({\n      setting: settingPrefix + 'is_related',\n      label: trans('discussion_related_label'),\n      help: trans('discussion_related_help'),\n      type: 'boolean',\n    });\n});\n\nfunction trans(key: string) {\n  return app.translator.trans(localePrefix + key);\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","prefix","settingPrefix","trans","app","registerSetting","setting","label","help","type","options","createdAt","default"],"sourceRoot":""}